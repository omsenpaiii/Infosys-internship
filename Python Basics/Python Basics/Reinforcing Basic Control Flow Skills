Ques:1
Complete the function to decide whether to play based on the weather. Consider 15 <= temperature < 35 as Normal.
Ans:
  def weather_decision(temperature):
      if temperature >= 35:
          return "It's too hot, I won't play."
      elif 15 <= temperature < 35:
          return "It's normal, I will play."
      else:
          return "It's cold, I will play with a jacket."


Ques:2
Complete the function to decide which movie to watch based on age. Consider children below 7 years of age are not allowed to watch movies.
Ans:
  def movie_night(age):
      if age >= 7: 
          return "You can watch a movie."
      else:
          return "You should watch a cartoon movie."


Ques:3
Complete the function to filter fruits with more than 5 characters from a list.
Ans:
  def filter_fruits(fruits):
      result = []
      for fruit in fruits:
          if len(fruit) > 5:
              result.append(fruit)
      return result


Ques:4
Complete the function to buy items until the budget is exhausted.
Ans:
  def shopping_budget(prices, budget):
      total_spent = 0
      for price in prices:
          total_spent += price
          if total_spent > budget:  
              return "Out of Budget"
      return total_spent


Ques:5
Predict the output of the following code:
def ice_cream_decision (money):
    if money >= 50:
        return "I will buy an ice cream."
    else:
        return "I will save my money."
print(ice_cream_decision(40))
o I will save my money.
o I will buy an ice cream.
o Error
o None
Ans:
  I will save my money.


Ques:6
Predict the output of the following code:
def exam_grade (marks):
    if marks >= 90:
        return "Excellent"
    elif marks >= 70:
        return "Good"
    elif marks >= 50:
        return "Average"
    else:
        return "Fail"
print(exam_grade(65))
o Good
o Average
o Fail
o Excellent
Ans:
  Average


Ques:7
Predict the output of the following code:
def drink_water (daily_usage):
    total_used=0
    for usage in daily_usage:
        if usage > 2:
          continue
        total_used += usage
    return total_used
print(drink_water([1.5, 2.1, 2.5, 1.8]))
o 1.8
o 2.1
o 2.5
o 3.3
Ans:
  3.3


Ques:8
Predict the output of the following code:
def travel_distance(distances, max_distance):
    total_distance = 0
    for distance in distances:
        if total_distance + distance > max_distance:
            return "Cannot Travel"
        total_distance += distance
    return total_distance
print(travel_distance([10, 20, 30, 40, 50))
o Cannot Travel
o 90
o 100
o 50
Ans:
  Cannot Travel


Ques:9
This function is supposed to check if the bill amount exceeds 1000. If so, it should return Congratulations! You get a discount.. Otherwise, it should return No discount for you..
There is a logical error in the code. Fix it.
Ans:
  def check_discount(bill_amount):
      if bill_amount > 1000:
          return "Congratulations! You get a discount."
      else:
          return "No discount for you."


Ques:10
This function is designed to suggest an activity for the weekend based on the weather. If the weather is sunny, it should return Go for a hike..
For rainy, it should return Watch movies at home., and for snowy, Build a snowman.. However, the current implementation fails to give correct suggestions. Fix it.
Ans:
  def weekend_plan(weather):
      if weather == "sunny":
          return "Go for a hike."
      elif weather == "rainy":
          return "Watch movies at home."
      elif weather == "snowy":
          return "Build a snowman."
      else:
          return "Stay home."


Ques:11
This function is supposed to find the longest word in a list of words. Fix the errors to make the function work correctly.
Ans:
  def longest_word(words):
    longest = ""
    for word in words:
        if len(word) > len(longest):  # Correct comparison for longest word
            longest = word
    return longest


Ques:12
Write a function gym_subscription that categorizes gym users based on the number of visits in a week. The function should return:
Inactive if the number of visits is 0.
Basic if the number of visits is between 1 and 3 (inclusive).
Premium for more than 3 visits.
Ans:
  def gym_subscription(visit):
        if visit == 0:
            return "Inactive"
        elif 1 <= visit <= 3:
            return "Basic"
        else:
            return "Premium"


Ques:13
Write a function study_hours_tracker that takes a list of study hours as input and categorizes each entry based on the following conditions:
Excellent for study hours greater than or equal to 6.
Good for study hours between 3 and 5 (inclusive).
Needs Improvement for study hours less than 3.
The function should return a list of categories corresponding to the input study hours.
Ans:
  def study_hours_tracker(hours):
    result = []
    for hour in hours:
        if hour >= 6:
            result.append("Excellent")
        elif 3 <= hour <= 5:
            result.append("Good")
        else:
            result.append("Needs Improvement")
    return result


Ques:14
Write a function marathon_planner that calculates how many days it will take to accumulate a target total distance. The function should take two arguments:
initial_distance (float): The distance to run on the first day (in kilometers).
target_distance (float): The total target distance to accumulate (in kilometers).
Here's how the function should work:
You start by running the initial_distance on day 1.
Each subsequent day, you run 10% more distance than the previous day.
The distances from all days are added together (accumulated).
The function should return the number of days needed for the accumulated total distance to reach or exceed the target_distance.
For example, if you start with 5km and want to reach a total of 20km:
Day 1: You run 5km (Total so far: 5km)
Day 2: You run 5.5km (Total so far: 10.5km)
Day 3: You run 6.05km (Total so far: 16.55km)
Day 4: You run 6.655km (Total so far: 23.205km)
The function would return 4 days, since that's when the total accumulated distance first exceeds 20km.
Ans:
  def marathon_planner(initial_distance, target_distance):
    if initial_distance <= 0 or target_distance <= 0:
        raise ValueError("Distances must be positive")
    current_day_distance = initial_distance
    total_distance = initial_distance
    days = 1
    while total_distance < target_distance:
        current_day_distance += current_day_distance * 0.1  # Increase by 10%
        total_distance += current_day_distance
        days += 1
    return days


Ques:15
Write a function vacation_budget that tracks the total expenses during a vacation. The function should:
Skip any expenses greater than 500.
Stop adding expenses once the total exceeds the provided budget.
Return the total amount spent within the budget.
Ans:
  def vacation_budget(expenses, budget):
    total_spent = 0
    for expense in expenses:
        if expense > 500:
            continue  # Skip expenses greater than 500
        if total_spent + expense > budget:
            break  # Stop if adding the expense exceeds the budget
        total_spent += expense
    return total_spent
